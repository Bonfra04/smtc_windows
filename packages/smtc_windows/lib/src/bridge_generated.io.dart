// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class SmtcWindowsPlatform extends FlutterRustBridgeBase<SmtcWindowsWire> {
  SmtcWindowsPlatform(ffi.DynamicLibrary dylib) : super(SmtcWindowsWire(dylib));

// Section: api2wire

  @protected
  wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(StdSyncMutexWindowsMediaPlaybackMediaPlayer raw) {
    final ptr = inner.new_StdSyncMutexWindowsMediaPlaybackMediaPlayer();
    _api_fill_to_wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_MusicMetadata> api2wire_box_autoadd_music_metadata(MusicMetadata raw) {
    final ptr = inner.new_box_autoadd_music_metadata_0();
    _api_fill_to_wire_music_metadata(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PlaybackTimeline> api2wire_box_autoadd_playback_timeline(PlaybackTimeline raw) {
    final ptr = inner.new_box_autoadd_playback_timeline_0();
    _api_fill_to_wire_playback_timeline(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SMTCConfig> api2wire_box_autoadd_smtc_config(SMTCConfig raw) {
    final ptr = inner.new_box_autoadd_smtc_config_0();
    _api_fill_to_wire_smtc_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr);
  OpaqueTypeFinalizer get StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer => _StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(StdSyncMutexWindowsMediaPlaybackMediaPlayer apiObj, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_music_metadata(MusicMetadata apiObj, ffi.Pointer<wire_MusicMetadata> wireObj) {
    _api_fill_to_wire_music_metadata(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_playback_timeline(PlaybackTimeline apiObj, ffi.Pointer<wire_PlaybackTimeline> wireObj) {
    _api_fill_to_wire_playback_timeline(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_smtc_config(SMTCConfig apiObj, ffi.Pointer<wire_SMTCConfig> wireObj) {
    _api_fill_to_wire_smtc_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_music_metadata(MusicMetadata apiObj, wire_MusicMetadata wireObj) {
    wireObj.title = api2wire_String(apiObj.title);
    wireObj.artist = api2wire_String(apiObj.artist);
    wireObj.album = api2wire_String(apiObj.album);
    wireObj.album_artist = api2wire_String(apiObj.albumArtist);
    wireObj.track_number = api2wire_u32(apiObj.trackNumber);
    wireObj.thumbnail = api2wire_opt_String(apiObj.thumbnail);
  }

  void _api_fill_to_wire_playback_timeline(PlaybackTimeline apiObj, wire_PlaybackTimeline wireObj) {
    wireObj.start_time_ms = api2wire_i64(apiObj.startTimeMs);
    wireObj.end_time_ms = api2wire_i64(apiObj.endTimeMs);
    wireObj.position_ms = api2wire_i64(apiObj.positionMs);
    wireObj.min_seek_time_ms = api2wire_opt_box_autoadd_i64(apiObj.minSeekTimeMs);
    wireObj.max_seek_time_ms = api2wire_opt_box_autoadd_i64(apiObj.maxSeekTimeMs);
  }

  void _api_fill_to_wire_smtc_config(SMTCConfig apiObj, wire_SMTCConfig wireObj) {
    wireObj.play_enabled = api2wire_bool(apiObj.playEnabled);
    wireObj.pause_enabled = api2wire_bool(apiObj.pauseEnabled);
    wireObj.stop_enabled = api2wire_bool(apiObj.stopEnabled);
    wireObj.next_enabled = api2wire_bool(apiObj.nextEnabled);
    wireObj.prev_enabled = api2wire_bool(apiObj.prevEnabled);
    wireObj.fast_forward_enabled = api2wire_bool(apiObj.fastForwardEnabled);
    wireObj.rewind_enabled = api2wire_bool(apiObj.rewindEnabled);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class SmtcWindowsWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SmtcWindowsWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SmtcWindowsWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  WireSyncReturn wire_smtc_new() {
    return _wire_smtc_new();
  }

  late final _wire_smtc_newPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_smtc_new');
  late final _wire_smtc_new = _wire_smtc_newPtr.asFunction<WireSyncReturn Function()>();

  void wire_smtc_update_config(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    ffi.Pointer<wire_SMTCConfig> config,
  ) {
    return _wire_smtc_update_config(
      port_,
      media_player,
      config,
    );
  }

  late final _wire_smtc_update_configPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_SMTCConfig>)>>('wire_smtc_update_config');
  late final _wire_smtc_update_config = _wire_smtc_update_configPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_SMTCConfig>)>();

  void wire_smtc_update_metadata(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    ffi.Pointer<wire_MusicMetadata> metadata,
  ) {
    return _wire_smtc_update_metadata(
      port_,
      media_player,
      metadata,
    );
  }

  late final _wire_smtc_update_metadataPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_MusicMetadata>)>>('wire_smtc_update_metadata');
  late final _wire_smtc_update_metadata = _wire_smtc_update_metadataPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_MusicMetadata>)>();

  void wire_smtc_update_timeline(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    ffi.Pointer<wire_PlaybackTimeline> timeline,
  ) {
    return _wire_smtc_update_timeline(
      port_,
      media_player,
      timeline,
    );
  }

  late final _wire_smtc_update_timelinePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_PlaybackTimeline>)>>('wire_smtc_update_timeline');
  late final _wire_smtc_update_timeline = _wire_smtc_update_timelinePtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_PlaybackTimeline>)>();

  void wire_smtc_update_playback_status(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    int status,
  ) {
    return _wire_smtc_update_playback_status(
      port_,
      media_player,
      status,
    );
  }

  late final _wire_smtc_update_playback_statusPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Int32)>>('wire_smtc_update_playback_status');
  late final _wire_smtc_update_playback_status = _wire_smtc_update_playback_statusPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, int)>();

  void wire_smtc_update_shuffle(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    bool shuffle,
  ) {
    return _wire_smtc_update_shuffle(
      port_,
      media_player,
      shuffle,
    );
  }

  late final _wire_smtc_update_shufflePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Bool)>>('wire_smtc_update_shuffle');
  late final _wire_smtc_update_shuffle = _wire_smtc_update_shufflePtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, bool)>();

  void wire_smtc_update_repeat_mode(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
    ffi.Pointer<wire_uint_8_list> repeat_mode,
  ) {
    return _wire_smtc_update_repeat_mode(
      port_,
      media_player,
      repeat_mode,
    );
  }

  late final _wire_smtc_update_repeat_modePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_uint_8_list>)>>('wire_smtc_update_repeat_mode');
  late final _wire_smtc_update_repeat_mode = _wire_smtc_update_repeat_modePtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer, ffi.Pointer<wire_uint_8_list>)>();

  void wire_smtc_disable_smtc(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
  ) {
    return _wire_smtc_disable_smtc(
      port_,
      media_player,
    );
  }

  late final _wire_smtc_disable_smtcPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>>('wire_smtc_disable_smtc');
  late final _wire_smtc_disable_smtc = _wire_smtc_disable_smtcPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>();

  void wire_smtc_button_press_event(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
  ) {
    return _wire_smtc_button_press_event(
      port_,
      media_player,
    );
  }

  late final _wire_smtc_button_press_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>>('wire_smtc_button_press_event');
  late final _wire_smtc_button_press_event = _wire_smtc_button_press_eventPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>();

  void wire_smtc_position_change_request_event(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
  ) {
    return _wire_smtc_position_change_request_event(
      port_,
      media_player,
    );
  }

  late final _wire_smtc_position_change_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>>('wire_smtc_position_change_request_event');
  late final _wire_smtc_position_change_request_event = _wire_smtc_position_change_request_eventPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>();

  void wire_smtc_shuffle_request_event(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
  ) {
    return _wire_smtc_shuffle_request_event(
      port_,
      media_player,
    );
  }

  late final _wire_smtc_shuffle_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>>('wire_smtc_shuffle_request_event');
  late final _wire_smtc_shuffle_request_event = _wire_smtc_shuffle_request_eventPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>();

  void wire_smtc_repeat_mode_request_event(
    int port_,
    wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer media_player,
  ) {
    return _wire_smtc_repeat_mode_request_event(
      port_,
      media_player,
    );
  }

  late final _wire_smtc_repeat_mode_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>>('wire_smtc_repeat_mode_request_event');
  late final _wire_smtc_repeat_mode_request_event = _wire_smtc_repeat_mode_request_eventPtr.asFunction<void Function(int, wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer)>();

  void wire_initialize_media_player(
    int port_,
    ffi.Pointer<wire_SMTCConfig> config,
    ffi.Pointer<wire_PlaybackTimeline> timeline,
  ) {
    return _wire_initialize_media_player(
      port_,
      config,
      timeline,
    );
  }

  late final _wire_initialize_media_playerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SMTCConfig>, ffi.Pointer<wire_PlaybackTimeline>)>>('wire_initialize_media_player');
  late final _wire_initialize_media_player = _wire_initialize_media_playerPtr.asFunction<void Function(int, ffi.Pointer<wire_SMTCConfig>, ffi.Pointer<wire_PlaybackTimeline>)>();

  void wire_update_config(
    int port_,
    ffi.Pointer<wire_SMTCConfig> config,
  ) {
    return _wire_update_config(
      port_,
      config,
    );
  }

  late final _wire_update_configPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SMTCConfig>)>>('wire_update_config');
  late final _wire_update_config = _wire_update_configPtr.asFunction<void Function(int, ffi.Pointer<wire_SMTCConfig>)>();

  void wire_update_metadata(
    int port_,
    ffi.Pointer<wire_MusicMetadata> metadata,
  ) {
    return _wire_update_metadata(
      port_,
      metadata,
    );
  }

  late final _wire_update_metadataPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MusicMetadata>)>>('wire_update_metadata');
  late final _wire_update_metadata = _wire_update_metadataPtr.asFunction<void Function(int, ffi.Pointer<wire_MusicMetadata>)>();

  void wire_update_timeline(
    int port_,
    ffi.Pointer<wire_PlaybackTimeline> timeline,
  ) {
    return _wire_update_timeline(
      port_,
      timeline,
    );
  }

  late final _wire_update_timelinePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PlaybackTimeline>)>>('wire_update_timeline');
  late final _wire_update_timeline = _wire_update_timelinePtr.asFunction<void Function(int, ffi.Pointer<wire_PlaybackTimeline>)>();

  void wire_update_playback_status(
    int port_,
    int status,
  ) {
    return _wire_update_playback_status(
      port_,
      status,
    );
  }

  late final _wire_update_playback_statusPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_update_playback_status');
  late final _wire_update_playback_status = _wire_update_playback_statusPtr.asFunction<void Function(int, int)>();

  void wire_update_shuffle(
    int port_,
    bool shuffle,
  ) {
    return _wire_update_shuffle(
      port_,
      shuffle,
    );
  }

  late final _wire_update_shufflePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>('wire_update_shuffle');
  late final _wire_update_shuffle = _wire_update_shufflePtr.asFunction<void Function(int, bool)>();

  void wire_update_repeat_mode(
    int port_,
    ffi.Pointer<wire_uint_8_list> repeat_mode,
  ) {
    return _wire_update_repeat_mode(
      port_,
      repeat_mode,
    );
  }

  late final _wire_update_repeat_modePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_update_repeat_mode');
  late final _wire_update_repeat_mode = _wire_update_repeat_modePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_disable_smtc(
    int port_,
  ) {
    return _wire_disable_smtc(
      port_,
    );
  }

  late final _wire_disable_smtcPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_disable_smtc');
  late final _wire_disable_smtc = _wire_disable_smtcPtr.asFunction<void Function(int)>();

  void wire_button_press_event(
    int port_,
  ) {
    return _wire_button_press_event(
      port_,
    );
  }

  late final _wire_button_press_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_button_press_event');
  late final _wire_button_press_event = _wire_button_press_eventPtr.asFunction<void Function(int)>();

  void wire_position_change_request_event(
    int port_,
  ) {
    return _wire_position_change_request_event(
      port_,
    );
  }

  late final _wire_position_change_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_position_change_request_event');
  late final _wire_position_change_request_event = _wire_position_change_request_eventPtr.asFunction<void Function(int)>();

  void wire_shuffle_request_event(
    int port_,
  ) {
    return _wire_shuffle_request_event(
      port_,
    );
  }

  late final _wire_shuffle_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_shuffle_request_event');
  late final _wire_shuffle_request_event = _wire_shuffle_request_eventPtr.asFunction<void Function(int)>();

  void wire_repeat_mode_request_event(
    int port_,
  ) {
    return _wire_repeat_mode_request_event(
      port_,
    );
  }

  late final _wire_repeat_mode_request_eventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_repeat_mode_request_event');
  late final _wire_repeat_mode_request_event = _wire_repeat_mode_request_eventPtr.asFunction<void Function(int)>();

  wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer new_StdSyncMutexWindowsMediaPlaybackMediaPlayer() {
    return _new_StdSyncMutexWindowsMediaPlaybackMediaPlayer();
  }

  late final _new_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr = _lookup<ffi.NativeFunction<wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer Function()>>('new_StdSyncMutexWindowsMediaPlaybackMediaPlayer');
  late final _new_StdSyncMutexWindowsMediaPlaybackMediaPlayer = _new_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr.asFunction<wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_MusicMetadata> new_box_autoadd_music_metadata_0() {
    return _new_box_autoadd_music_metadata_0();
  }

  late final _new_box_autoadd_music_metadata_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_MusicMetadata> Function()>>('new_box_autoadd_music_metadata_0');
  late final _new_box_autoadd_music_metadata_0 = _new_box_autoadd_music_metadata_0Ptr.asFunction<ffi.Pointer<wire_MusicMetadata> Function()>();

  ffi.Pointer<wire_PlaybackTimeline> new_box_autoadd_playback_timeline_0() {
    return _new_box_autoadd_playback_timeline_0();
  }

  late final _new_box_autoadd_playback_timeline_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_PlaybackTimeline> Function()>>('new_box_autoadd_playback_timeline_0');
  late final _new_box_autoadd_playback_timeline_0 = _new_box_autoadd_playback_timeline_0Ptr.asFunction<ffi.Pointer<wire_PlaybackTimeline> Function()>();

  ffi.Pointer<wire_SMTCConfig> new_box_autoadd_smtc_config_0() {
    return _new_box_autoadd_smtc_config_0();
  }

  late final _new_box_autoadd_smtc_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_SMTCConfig> Function()>>('new_box_autoadd_smtc_config_0');
  late final _new_box_autoadd_smtc_config_0 = _new_box_autoadd_smtc_config_0Ptr.asFunction<ffi.Pointer<wire_SMTCConfig> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer(
      ptr,
    );
  }

  late final _drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer');
  late final _drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer = _drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer(
      ptr,
    );
  }

  late final _share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer');
  late final _share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer = _share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayerPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_SMTCConfig extends ffi.Struct {
  @ffi.Bool()
  external bool play_enabled;

  @ffi.Bool()
  external bool pause_enabled;

  @ffi.Bool()
  external bool stop_enabled;

  @ffi.Bool()
  external bool next_enabled;

  @ffi.Bool()
  external bool prev_enabled;

  @ffi.Bool()
  external bool fast_forward_enabled;

  @ffi.Bool()
  external bool rewind_enabled;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MusicMetadata extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> title;

  external ffi.Pointer<wire_uint_8_list> artist;

  external ffi.Pointer<wire_uint_8_list> album;

  external ffi.Pointer<wire_uint_8_list> album_artist;

  @ffi.Uint32()
  external int track_number;

  external ffi.Pointer<wire_uint_8_list> thumbnail;
}

class wire_PlaybackTimeline extends ffi.Struct {
  @ffi.Int64()
  external int start_time_ms;

  @ffi.Int64()
  external int end_time_ms;

  @ffi.Int64()
  external int position_ms;

  external ffi.Pointer<ffi.Int64> min_seek_time_ms;

  external ffi.Pointer<ffi.Int64> max_seek_time_ms;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
