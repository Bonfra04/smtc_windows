// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class SmtcWindows {
  StdSyncMutexWindowsMediaPlaybackMediaPlayer smtcNew({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcNewConstMeta;

  Future<void> smtcUpdateConfig({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required SMTCConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateConfigConstMeta;

  Future<void> smtcUpdateMetadata({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required MusicMetadata metadata, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateMetadataConstMeta;

  Future<void> smtcUpdateTimeline({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required PlaybackTimeline timeline, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateTimelineConstMeta;

  Future<void> smtcUpdatePlaybackStatus({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required PlaybackStatus status, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdatePlaybackStatusConstMeta;

  Future<void> smtcUpdateShuffle({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required bool shuffle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateShuffleConstMeta;

  Future<void> smtcUpdateRepeatMode({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required String repeatMode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateRepeatModeConstMeta;

  Future<void> smtcDisableSmtc({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcDisableSmtcConstMeta;

  Stream<String> smtcButtonPressEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcButtonPressEventConstMeta;

  Stream<int> smtcPositionChangeRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcPositionChangeRequestEventConstMeta;

  Stream<bool> smtcShuffleRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcShuffleRequestEventConstMeta;

  Stream<String> smtcRepeatModeRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSmtcRepeatModeRequestEventConstMeta;

  Future<void> initializeMediaPlayer({required SMTCConfig config, required PlaybackTimeline timeline, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeMediaPlayerConstMeta;

  Future<void> updateConfig({required SMTCConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateConfigConstMeta;

  Future<void> updateMetadata({required MusicMetadata metadata, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateMetadataConstMeta;

  Future<void> updateTimeline({required PlaybackTimeline timeline, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateTimelineConstMeta;

  Future<void> updatePlaybackStatus({required PlaybackStatus status, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdatePlaybackStatusConstMeta;

  Future<void> updateShuffle({required bool shuffle, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateShuffleConstMeta;

  Future<void> updateRepeatMode({required String repeatMode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateRepeatModeConstMeta;

  Future<void> disableSmtc({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisableSmtcConstMeta;

  Stream<String> buttonPressEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kButtonPressEventConstMeta;

  Stream<int> positionChangeRequestEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPositionChangeRequestEventConstMeta;

  Stream<bool> shuffleRequestEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShuffleRequestEventConstMeta;

  Stream<String> repeatModeRequestEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRepeatModeRequestEventConstMeta;

  DropFnType get dropOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer;
  ShareFnType get shareOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer;
  OpaqueTypeFinalizer get StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer;
}

@sealed
class StdSyncMutexWindowsMediaPlaybackMediaPlayer extends FrbOpaque {
  final SmtcWindows bridge;
  StdSyncMutexWindowsMediaPlaybackMediaPlayer.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer;
}

class MusicMetadata {
  final String title;
  final String artist;
  final String album;
  final String albumArtist;
  final int trackNumber;
  final String? thumbnail;

  const MusicMetadata({
    required this.title,
    required this.artist,
    required this.album,
    required this.albumArtist,
    required this.trackNumber,
    this.thumbnail,
  });
}

enum PlaybackStatus {
  Closed,
  Changing,
  Stopped,
  Playing,
  Paused,
}

class PlaybackTimeline {
  final int startTimeMs;
  final int endTimeMs;
  final int positionMs;
  final int? minSeekTimeMs;
  final int? maxSeekTimeMs;

  const PlaybackTimeline({
    required this.startTimeMs,
    required this.endTimeMs,
    required this.positionMs,
    this.minSeekTimeMs,
    this.maxSeekTimeMs,
  });
}

class SMTCConfig {
  final bool playEnabled;
  final bool pauseEnabled;
  final bool stopEnabled;
  final bool nextEnabled;
  final bool prevEnabled;
  final bool fastForwardEnabled;
  final bool rewindEnabled;

  const SMTCConfig({
    required this.playEnabled,
    required this.pauseEnabled,
    required this.stopEnabled,
    required this.nextEnabled,
    required this.prevEnabled,
    required this.fastForwardEnabled,
    required this.rewindEnabled,
  });
}

class SmtcWindowsImpl implements SmtcWindows {
  final SmtcWindowsPlatform _platform;
  factory SmtcWindowsImpl(ExternalLibrary dylib) => SmtcWindowsImpl.raw(SmtcWindowsPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory SmtcWindowsImpl.wasm(FutureOr<WasmModule> module) => SmtcWindowsImpl(module as ExternalLibrary);
  SmtcWindowsImpl.raw(this._platform);
  StdSyncMutexWindowsMediaPlaybackMediaPlayer smtcNew({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_smtc_new(),
      parseSuccessData: _wire2api_StdSyncMutexWindowsMediaPlaybackMediaPlayer,
      constMeta: kSmtcNewConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcNewConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_new",
        argNames: [],
      );

  Future<void> smtcUpdateConfig({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required SMTCConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = _platform.api2wire_box_autoadd_smtc_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_config(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdateConfigConstMeta,
      argValues: [
        mediaPlayer,
        config
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateConfigConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_config",
        argNames: [
          "mediaPlayer",
          "config"
        ],
      );

  Future<void> smtcUpdateMetadata({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required MusicMetadata metadata, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = _platform.api2wire_box_autoadd_music_metadata(metadata);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_metadata(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdateMetadataConstMeta,
      argValues: [
        mediaPlayer,
        metadata
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateMetadataConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_metadata",
        argNames: [
          "mediaPlayer",
          "metadata"
        ],
      );

  Future<void> smtcUpdateTimeline({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required PlaybackTimeline timeline, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = _platform.api2wire_box_autoadd_playback_timeline(timeline);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_timeline(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdateTimelineConstMeta,
      argValues: [
        mediaPlayer,
        timeline
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateTimelineConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_timeline",
        argNames: [
          "mediaPlayer",
          "timeline"
        ],
      );

  Future<void> smtcUpdatePlaybackStatus({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required PlaybackStatus status, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = api2wire_playback_status(status);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_playback_status(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdatePlaybackStatusConstMeta,
      argValues: [
        mediaPlayer,
        status
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdatePlaybackStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_playback_status",
        argNames: [
          "mediaPlayer",
          "status"
        ],
      );

  Future<void> smtcUpdateShuffle({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required bool shuffle, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = shuffle;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_shuffle(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdateShuffleConstMeta,
      argValues: [
        mediaPlayer,
        shuffle
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateShuffleConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_shuffle",
        argNames: [
          "mediaPlayer",
          "shuffle"
        ],
      );

  Future<void> smtcUpdateRepeatMode({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, required String repeatMode, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    var arg1 = _platform.api2wire_String(repeatMode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_update_repeat_mode(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcUpdateRepeatModeConstMeta,
      argValues: [
        mediaPlayer,
        repeatMode
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcUpdateRepeatModeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_update_repeat_mode",
        argNames: [
          "mediaPlayer",
          "repeatMode"
        ],
      );

  Future<void> smtcDisableSmtc({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_disable_smtc(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSmtcDisableSmtcConstMeta,
      argValues: [
        mediaPlayer
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcDisableSmtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_disable_smtc",
        argNames: [
          "mediaPlayer"
        ],
      );

  Stream<String> smtcButtonPressEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_button_press_event(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSmtcButtonPressEventConstMeta,
      argValues: [
        mediaPlayer
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcButtonPressEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_button_press_event",
        argNames: [
          "mediaPlayer"
        ],
      );

  Stream<int> smtcPositionChangeRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_position_change_request_event(port_, arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kSmtcPositionChangeRequestEventConstMeta,
      argValues: [
        mediaPlayer
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcPositionChangeRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_position_change_request_event",
        argNames: [
          "mediaPlayer"
        ],
      );

  Stream<bool> smtcShuffleRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_shuffle_request_event(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSmtcShuffleRequestEventConstMeta,
      argValues: [
        mediaPlayer
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcShuffleRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_shuffle_request_event",
        argNames: [
          "mediaPlayer"
        ],
      );

  Stream<String> smtcRepeatModeRequestEvent({required StdSyncMutexWindowsMediaPlaybackMediaPlayer mediaPlayer, dynamic hint}) {
    var arg0 = _platform.api2wire_StdSyncMutexWindowsMediaPlaybackMediaPlayer(mediaPlayer);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_smtc_repeat_mode_request_event(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSmtcRepeatModeRequestEventConstMeta,
      argValues: [
        mediaPlayer
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSmtcRepeatModeRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "smtc_repeat_mode_request_event",
        argNames: [
          "mediaPlayer"
        ],
      );

  Future<void> initializeMediaPlayer({required SMTCConfig config, required PlaybackTimeline timeline, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_smtc_config(config);
    var arg1 = _platform.api2wire_box_autoadd_playback_timeline(timeline);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialize_media_player(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitializeMediaPlayerConstMeta,
      argValues: [
        config,
        timeline
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeMediaPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize_media_player",
        argNames: [
          "config",
          "timeline"
        ],
      );

  Future<void> updateConfig({required SMTCConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_smtc_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_config(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateConfigConstMeta,
      argValues: [
        config
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateConfigConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_config",
        argNames: [
          "config"
        ],
      );

  Future<void> updateMetadata({required MusicMetadata metadata, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_music_metadata(metadata);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_metadata(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateMetadataConstMeta,
      argValues: [
        metadata
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateMetadataConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_metadata",
        argNames: [
          "metadata"
        ],
      );

  Future<void> updateTimeline({required PlaybackTimeline timeline, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_playback_timeline(timeline);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_timeline(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateTimelineConstMeta,
      argValues: [
        timeline
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateTimelineConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_timeline",
        argNames: [
          "timeline"
        ],
      );

  Future<void> updatePlaybackStatus({required PlaybackStatus status, dynamic hint}) {
    var arg0 = api2wire_playback_status(status);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_playback_status(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdatePlaybackStatusConstMeta,
      argValues: [
        status
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdatePlaybackStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_playback_status",
        argNames: [
          "status"
        ],
      );

  Future<void> updateShuffle({required bool shuffle, dynamic hint}) {
    var arg0 = shuffle;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_shuffle(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateShuffleConstMeta,
      argValues: [
        shuffle
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateShuffleConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_shuffle",
        argNames: [
          "shuffle"
        ],
      );

  Future<void> updateRepeatMode({required String repeatMode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(repeatMode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_repeat_mode(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateRepeatModeConstMeta,
      argValues: [
        repeatMode
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateRepeatModeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "update_repeat_mode",
        argNames: [
          "repeatMode"
        ],
      );

  Future<void> disableSmtc({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disable_smtc(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisableSmtcConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisableSmtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disable_smtc",
        argNames: [],
      );

  Stream<String> buttonPressEvent({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_button_press_event(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kButtonPressEventConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kButtonPressEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "button_press_event",
        argNames: [],
      );

  Stream<int> positionChangeRequestEvent({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_position_change_request_event(port_),
      parseSuccessData: _wire2api_i64,
      constMeta: kPositionChangeRequestEventConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPositionChangeRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "position_change_request_event",
        argNames: [],
      );

  Stream<bool> shuffleRequestEvent({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_shuffle_request_event(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kShuffleRequestEventConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShuffleRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "shuffle_request_event",
        argNames: [],
      );

  Stream<String> repeatModeRequestEvent({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repeat_mode_request_event(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kRepeatModeRequestEventConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepeatModeRequestEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "repeat_mode_request_event",
        argNames: [],
      );

  DropFnType get dropOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer => _platform.inner.drop_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer;
  ShareFnType get shareOpaqueStdSyncMutexWindowsMediaPlaybackMediaPlayer => _platform.inner.share_opaque_StdSyncMutexWindowsMediaPlaybackMediaPlayer;
  OpaqueTypeFinalizer get StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer => _platform.StdSyncMutexWindowsMediaPlaybackMediaPlayerFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  StdSyncMutexWindowsMediaPlaybackMediaPlayer _wire2api_StdSyncMutexWindowsMediaPlaybackMediaPlayer(dynamic raw) {
    return StdSyncMutexWindowsMediaPlaybackMediaPlayer.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_playback_status(PlaybackStatus raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
